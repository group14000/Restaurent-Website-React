{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\OneDrive\\\\Documents\\\\Github - Repo\\\\Restaurent-Website-React\\\\restaurent-website\\\\src\\\\store\\\\CartProvider.js\",\n  _s = $RefreshSig$();\n// Importing the 'useReducer' hook from 'react'\nimport { useReducer } from 'react';\n\n// Importing the 'CartContext' from './cart-context'\nimport CartContext from './cart-context';\n\n// Defining the default state for the cart\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  // An array to store cart items\n  totalAmount: 0 // The total amount of the cart\n};\n\n// Reducer function to handle cart actions\nconst cartReducer = (state, action) => {\n  // Handling the 'ADD' action type\n  if (action.type === 'ADD') {\n    // Calculating the updated total amount when adding an item\n    const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;\n\n    // Finding the index of an existing cart item, if any\n    const existingCartItemIndex = state.items.findIndex(item => item.id === action.item.id);\n    const existingCartItem = state.items[existingCartItemIndex];\n    let updatedItems;\n\n    // Checking if the item already exists in the cart\n    if (existingCartItem) {\n      // If it exists, update the existing item's amount\n      const updatedItem = {\n        ...existingCartItem,\n        amount: existingCartItem.amount + action.item.amount\n      };\n      updatedItems = [...state.items];\n      updatedItems[existingCartItemIndex] = updatedItem;\n    } else {\n      // If it doesn't exist, add the item to the cart\n      updatedItems = state.items.concat(action.item);\n    }\n\n    // Return the updated cart state\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n\n  // Handling the 'REMOVE' action type\n  if (action.type === 'REMOVE') {\n    // Finding the index of the item to be removed\n    const existingCartItemIndex = state.items.findIndex(item => item.id === action.id);\n    const existingItem = state.items[existingCartItemIndex];\n    const updatedTotalAmount = state.totalAmount - existingItem.price;\n    let updatedItems;\n\n    // Checking if the item's amount is 1, meaning we should remove it completely\n    if (existingItem.amount === 1) {\n      updatedItems = state.items.filter(item => item.id !== action.id);\n    } else {\n      // If the item's amount is more than 1, decrease its amount by 1\n      const updatedItem = {\n        ...existingItem,\n        amount: existingItem.amount - 1\n      };\n      updatedItems = [...state.items];\n      updatedItems[existingCartItemIndex] = updatedItem;\n    }\n\n    // Return the updated cart state\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n\n  // Default case: return the default cart state\n  return defaultCartState;\n};\n\n// Defining the 'CartProvider' component\nconst CartProvider = props => {\n  _s();\n  // Using 'useReducer' to manage cart state and actions\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\n\n  // Handler function to add an item to the cart\n  const addItemToCartHandler = item => {\n    dispatchCartAction({\n      type: 'ADD',\n      item: item\n    });\n  };\n\n  // Handler function to remove an item from the cart\n  const removeItemFromCartHandler = id => {\n    dispatchCartAction({\n      type: 'REMOVE',\n      id: id\n    });\n  };\n\n  // Creating a cart context object\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler\n  };\n\n  // Returning the 'CartProvider' component with the cart context\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n};\n\n// Exporting the 'CartProvider' component for use in other parts of the application\n_s(CartProvider, \"PxEugEseoIJIbjFwtAJal5z5ClY=\");\n_c = CartProvider;\nexport default CartProvider;\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["useReducer","CartContext","jsxDEV","_jsxDEV","defaultCartState","items","totalAmount","cartReducer","state","action","type","updatedTotalAmount","item","price","amount","existingCartItemIndex","findIndex","id","existingCartItem","updatedItems","updatedItem","concat","existingItem","filter","CartProvider","props","_s","cartState","dispatchCartAction","addItemToCartHandler","removeItemFromCartHandler","cartContext","addItem","removeItem","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/hp/OneDrive/Documents/Github - Repo/Restaurent-Website-React/restaurent-website/src/store/CartProvider.js"],"sourcesContent":["// Importing the 'useReducer' hook from 'react'\r\nimport { useReducer } from 'react';\r\n\r\n// Importing the 'CartContext' from './cart-context'\r\nimport CartContext from './cart-context';\r\n\r\n// Defining the default state for the cart\r\nconst defaultCartState = {\r\n  items: [],          // An array to store cart items\r\n  totalAmount: 0,     // The total amount of the cart\r\n};\r\n\r\n// Reducer function to handle cart actions\r\nconst cartReducer = (state, action) => {\r\n  // Handling the 'ADD' action type\r\n  if (action.type === 'ADD') {\r\n    // Calculating the updated total amount when adding an item\r\n    const updatedTotalAmount =\r\n      state.totalAmount + action.item.price * action.item.amount;\r\n\r\n    // Finding the index of an existing cart item, if any\r\n    const existingCartItemIndex = state.items.findIndex(\r\n      (item) => item.id === action.item.id\r\n    );\r\n    const existingCartItem = state.items[existingCartItemIndex];\r\n    let updatedItems;\r\n\r\n    // Checking if the item already exists in the cart\r\n    if (existingCartItem) {\r\n      // If it exists, update the existing item's amount\r\n      const updatedItem = {\r\n        ...existingCartItem,\r\n        amount: existingCartItem.amount + action.item.amount,\r\n      };\r\n      updatedItems = [...state.items];\r\n      updatedItems[existingCartItemIndex] = updatedItem;\r\n    } else {\r\n      // If it doesn't exist, add the item to the cart\r\n      updatedItems = state.items.concat(action.item);\r\n    }\r\n\r\n    // Return the updated cart state\r\n    return {\r\n      items: updatedItems,\r\n      totalAmount: updatedTotalAmount,\r\n    };\r\n  }\r\n\r\n  // Handling the 'REMOVE' action type\r\n  if (action.type === 'REMOVE') {\r\n    // Finding the index of the item to be removed\r\n    const existingCartItemIndex = state.items.findIndex(\r\n      (item) => item.id === action.id\r\n    );\r\n    const existingItem = state.items[existingCartItemIndex];\r\n    const updatedTotalAmount = state.totalAmount - existingItem.price;\r\n    let updatedItems;\r\n\r\n    // Checking if the item's amount is 1, meaning we should remove it completely\r\n    if (existingItem.amount === 1) {\r\n      updatedItems = state.items.filter(item => item.id !== action.id);\r\n    } else {\r\n      // If the item's amount is more than 1, decrease its amount by 1\r\n      const updatedItem = { ...existingItem, amount: existingItem.amount - 1 };\r\n      updatedItems = [...state.items];\r\n      updatedItems[existingCartItemIndex] = updatedItem;\r\n    }\r\n\r\n    // Return the updated cart state\r\n    return {\r\n      items: updatedItems,\r\n      totalAmount: updatedTotalAmount\r\n    };\r\n  }\r\n\r\n  // Default case: return the default cart state\r\n  return defaultCartState;\r\n};\r\n\r\n// Defining the 'CartProvider' component\r\nconst CartProvider = (props) => {\r\n  // Using 'useReducer' to manage cart state and actions\r\n  const [cartState, dispatchCartAction] = useReducer(\r\n    cartReducer,\r\n    defaultCartState\r\n  );\r\n\r\n  // Handler function to add an item to the cart\r\n  const addItemToCartHandler = (item) => {\r\n    dispatchCartAction({ type: 'ADD', item: item });\r\n  };\r\n\r\n  // Handler function to remove an item from the cart\r\n  const removeItemFromCartHandler = (id) => {\r\n    dispatchCartAction({ type: 'REMOVE', id: id });\r\n  };\r\n\r\n  // Creating a cart context object\r\n  const cartContext = {\r\n    items: cartState.items,\r\n    totalAmount: cartState.totalAmount,\r\n    addItem: addItemToCartHandler,\r\n    removeItem: removeItemFromCartHandler,\r\n  };\r\n\r\n  // Returning the 'CartProvider' component with the cart context\r\n  return (\r\n    <CartContext.Provider value={cartContext}>\r\n      {props.children}\r\n    </CartContext.Provider>\r\n  );\r\n};\r\n\r\n// Exporting the 'CartProvider' component for use in other parts of the application\r\nexport default CartProvider;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}